{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "import h5py\n",
    "import os\n",
    "import tempfile\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Constants\n",
    "NUM_NODES = 30_000_000\n",
    "AVG_DEGREE = 10\n",
    "CHUNK_SIZE = 1_000_000\n",
    "\n",
    "def create_memory_mapped_edge_list(num_edges):\n",
    "    # Create a memory-mapped array for edges\n",
    "    fp = tempfile.NamedTemporaryFile(delete=False)\n",
    "    fp.close()\n",
    "    edge_array = np.memmap(fp.name, dtype=np.int32, mode='w+', shape=(num_edges, 2))\n",
    "    return edge_array, fp.name\n",
    "\n",
    "def generate_edges(edge_array, num_nodes, num_edges):\n",
    "    print(\"Generating edges...\")\n",
    "    for i in tqdm(range(0, num_edges, CHUNK_SIZE)):\n",
    "        chunk_size = min(CHUNK_SIZE, num_edges - i)\n",
    "        chunk = np.random.randint(0, num_nodes, size=(chunk_size, 2))\n",
    "        edge_array[i:i+chunk_size] = chunk\n",
    "    print(\"Edge generation complete.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def save_network_data_hdf5(filename='large_network.h5'):\n",
    "    print(f\"Saving network data to {filename}...\")\n",
    "\n",
    "    num_edges = NUM_NODES * AVG_DEGREE // 2\n",
    "\n",
    "    with h5py.File(filename, 'w') as f:\n",
    "        # Save graph properties\n",
    "        f.attrs['num_nodes'] = NUM_NODES\n",
    "        f.attrs['num_edges'] = num_edges\n",
    "        f.attrs['avg_degree'] = AVG_DEGREE\n",
    "\n",
    "        # Create datasets\n",
    "        labels = f.create_dataset('labels', shape=(NUM_NODES,), dtype=h5py.special_dtype(vlen=str))\n",
    "        edges = f.create_dataset('edges', shape=(num_edges, 3), \n",
    "                                 dtype=[('source', '<i4'), ('target', '<i4'), ('weight', '<f4')],\n",
    "                                 chunks=(CHUNK_SIZE, 3))\n",
    "\n",
    "        # Generate and save labels\n",
    "        print(\"Generating and saving labels...\")\n",
    "        for i in tqdm(range(0, NUM_NODES, CHUNK_SIZE)):\n",
    "            chunk_size = min(CHUNK_SIZE, NUM_NODES - i)\n",
    "            labels[i:i+chunk_size] = [f\"Node_{j}\" for j in range(i, i+chunk_size)]\n",
    "\n",
    "        # Generate and save edges\n",
    "        edge_array, temp_file = create_memory_mapped_edge_list(num_edges)\n",
    "        generate_edges(edge_array, NUM_NODES, num_edges)\n",
    "\n",
    "        print(\"Saving edges to HDF5...\")\n",
    "        for i in tqdm(range(0, num_edges, CHUNK_SIZE)):\n",
    "            chunk_size = min(CHUNK_SIZE, num_edges - i)\n",
    "            edge_chunk = edge_array[i:i+chunk_size]\n",
    "            weights = np.random.random(chunk_size).astype(np.float32)\n",
    "            edges[i:i+chunk_size] = np.core.records.fromarrays([edge_chunk[:, 0], edge_chunk[:, 1], weights],\n",
    "                                                               names='source,target,weight')\n",
    "\n",
    "        # Clean up\n",
    "        del edge_array\n",
    "        os.unlink(temp_file)\n",
    "\n",
    "    print(\"Data saving complete.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving network data to large_network.h5...\n",
      "Generating and saving labels...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 30/30 [00:10<00:00,  2.74it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating edges...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 150/150 [00:01<00:00, 81.51it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edge generation complete.\n",
      "Saving edges to HDF5...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████|